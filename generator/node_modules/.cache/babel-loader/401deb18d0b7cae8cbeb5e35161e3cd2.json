{"ast":null,"code":"var _jsxFileName = \"/home/wave/JS tutorials/PasswordGenerator/password-generator/generator/src/components/PasswordGenerator.js\";\nimport React, { useState, useRef } from 'react';\nimport { Animated } from \"react-animated-css\";\nimport { LOWERCASE_CHAR_CODES, UPPERCASE_CHAR_CODES, NUMBER_CHAR_CODES, SYMBOL_CHAR_CODES } from '../shared/CharactersCodesArrays';\nimport './PasswordGenerator.css';\nimport copy from '../assets/copy_img.png';\n\nfunction PasswordGenerator(props) {\n  const [numberOfCharacters, setNumberOfCharacters] = useState(10);\n  const [includeUppercase, setIncludeUppercase] = useState(false);\n  const [includeNumbers, setIncludeNumbers] = useState(false);\n  const [includeSymbols, setIncludeSymbols] = useState(false);\n  const [generatedPassword, setGeneratedPassword] = useState('password');\n  const [passwordClass, setPasswordClass] = useState(\"password-placeholder\");\n  const [popUpVisible, setPopUpVisible] = useState(false);\n  const refPasswordField = useRef(null);\n\n  const onRangeChange = event => {\n    setNumberOfCharacters(event.target.value);\n  };\n\n  const generatePassword = () => {\n    setPasswordClass(\"generated-password\");\n    let charCodes = LOWERCASE_CHAR_CODES;\n\n    if (includeUppercase) {\n      charCodes = charCodes.concat(UPPERCASE_CHAR_CODES);\n    }\n\n    if (includeNumbers) {\n      charCodes = charCodes.concat(NUMBER_CHAR_CODES);\n    }\n\n    if (includeSymbols) {\n      charCodes = charCodes.concat(SYMBOL_CHAR_CODES);\n    }\n\n    const passwordCharacters = [];\n\n    for (let i = 0; i < numberOfCharacters; i++) {\n      const characterCode = charCodes[Math.floor(Math.random() * charCodes.length)];\n      passwordCharacters.push(String.fromCharCode(characterCode));\n    }\n\n    setGeneratedPassword(passwordCharacters.join(''));\n  };\n\n  const copyPasswordToClipboard = e => {\n    navigator.clipboard.writeText(generatedPassword);\n    setPopUpVisible(true);\n    setTimeout(() => {\n      setPopUpVisible(false);\n    }, 1500);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"generator-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"generator-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Generate password!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"password-display\",\n    onClick: copyPasswordToClipboard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: passwordClass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, generatedPassword)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"animated-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Animated, {\n    animationIn: \"zoomIn\",\n    animationOut: \"zoomOut\",\n    animationInDuration: 600,\n    animationOutDuration: 600,\n    animateOnMount: false,\n    isVisible: popUpVisible,\n    className: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"Password was copied!\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Number of characters\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"character-amount-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"range\",\n    min: \"1\",\n    max: \"30\",\n    value: numberOfCharacters,\n    onChange: onRangeChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    min: \"1\",\n    max: \"50\",\n    value: numberOfCharacters,\n    onChange: onRangeChange,\n    id: \"characterAmountNumber\",\n    className: \"number-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Include uppercase\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"includeUppercase\",\n    value: includeUppercase,\n    onChange: () => {\n      const prevValue = includeUppercase;\n      setIncludeUppercase(!prevValue);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"Include numbers\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"includeNumbers\",\n    value: includeNumbers,\n    onChange: () => {\n      const prevValue = includeNumbers;\n      setIncludeNumbers(!prevValue);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    for: \"includeSymbols\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"Include symbols\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"includeSymbols\",\n    value: includeSymbols,\n    onChange: () => {\n      const prevValue = includeSymbols;\n      setIncludeSymbols(!prevValue);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: generatePassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, \"Generate password\")));\n}\n\nexport default PasswordGenerator;","map":{"version":3,"sources":["/home/wave/JS tutorials/PasswordGenerator/password-generator/generator/src/components/PasswordGenerator.js"],"names":["React","useState","useRef","Animated","LOWERCASE_CHAR_CODES","UPPERCASE_CHAR_CODES","NUMBER_CHAR_CODES","SYMBOL_CHAR_CODES","copy","PasswordGenerator","props","numberOfCharacters","setNumberOfCharacters","includeUppercase","setIncludeUppercase","includeNumbers","setIncludeNumbers","includeSymbols","setIncludeSymbols","generatedPassword","setGeneratedPassword","passwordClass","setPasswordClass","popUpVisible","setPopUpVisible","refPasswordField","onRangeChange","event","target","value","generatePassword","charCodes","concat","passwordCharacters","i","characterCode","Math","floor","random","length","push","String","fromCharCode","join","copyPasswordToClipboard","e","navigator","clipboard","writeText","setTimeout","prevValue"],"mappings":"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","sourcesContent":["import React, {useState, useRef} from 'react';\nimport {Animated} from \"react-animated-css\";\n\nimport {LOWERCASE_CHAR_CODES, \n  UPPERCASE_CHAR_CODES,\n  NUMBER_CHAR_CODES,\n  SYMBOL_CHAR_CODES,\n} \nfrom '../shared/CharactersCodesArrays';\nimport './PasswordGenerator.css';\nimport copy from '../assets/copy_img.png';\n\n\nfunction PasswordGenerator (props) {\n  const [numberOfCharacters, setNumberOfCharacters] = useState(10);\n  const [includeUppercase, setIncludeUppercase] = useState(false);\n  const [includeNumbers, setIncludeNumbers] = useState(false);\n  const [includeSymbols, setIncludeSymbols] = useState(false);\n  const [generatedPassword, setGeneratedPassword] = useState('password');\n  const [passwordClass, setPasswordClass] = useState(\"password-placeholder\");\n  const [popUpVisible, setPopUpVisible] = useState(false);\n\n  const refPasswordField = useRef(null);\n\n  const onRangeChange = (event) => {\n    setNumberOfCharacters(event.target.value);\n  }\n\n  const generatePassword = () => {\n    setPasswordClass(\"generated-password\");\n    let charCodes = LOWERCASE_CHAR_CODES;\n    if (includeUppercase){\n      charCodes = charCodes.concat(UPPERCASE_CHAR_CODES);\n    }  \n    if (includeNumbers){\n      charCodes = charCodes.concat(NUMBER_CHAR_CODES);\n    }\n    if(includeSymbols){\n      charCodes = charCodes.concat(SYMBOL_CHAR_CODES);\n    }\n    const passwordCharacters = [];\n    for(let i = 0; i < numberOfCharacters; i++){\n      const characterCode = charCodes[Math.floor(Math.random() * charCodes.length)];\n      passwordCharacters.push(String.fromCharCode(characterCode));\n    }\n    \n    setGeneratedPassword(passwordCharacters.join(''));\n  }\n\n  const copyPasswordToClipboard = (e) => {\n    navigator.clipboard.writeText(generatedPassword);\n    setPopUpVisible(true);\n    setTimeout(() => {\n      setPopUpVisible(false);\n    }, 1500);\n  }\n\n  return (\n    <div className = \"generator-container\">\n      <h2 className = \"generator-title\">Generate password!</h2>\n      <div className = \"password-display\" onClick = {copyPasswordToClipboard}>\n          <p className = {passwordClass}>{generatedPassword}</p>\n      </div>\n      <div className = \"animated-container\">\n        <Animated \n          animationIn=\"zoomIn\" \n          animationOut=\"zoomOut\" \n          animationInDuration={600} \n          animationOutDuration={600} \n          animateOnMount = {false}\n          isVisible={popUpVisible}\n          className = \"message\"\n        >\n          Password was copied!\n        </Animated>\n      </div>\n      <div className = \"form\">\n        <p>Number of characters</p>\n        <div className = \"character-amount-container\">\n          <input \n            type = \"range\" \n            min=\"1\" \n            max=\"30\" \n            value={numberOfCharacters}\n            onChange = {onRangeChange}\n          />\n          <input \n            type = \"number\"\n            min=\"1\" \n            max=\"50\" \n            value={numberOfCharacters}\n            onChange = {onRangeChange}\n            id=\"characterAmountNumber\"  \n            className = \"number-input\"\n          />\n        </div>\n        <p>Include uppercase</p>\n        <input \n          type = \"checkbox\" \n          id = \"includeUppercase\"\n          value = {includeUppercase}\n          onChange = {() => {\n            const prevValue = includeUppercase;\n            setIncludeUppercase(!prevValue);\n          }}  \n        />\n\n        <p>Include numbers</p>\n        <input \n          type = \"checkbox\" \n          id = \"includeNumbers\"\n          value = {includeNumbers}\n          onChange = {() => {\n            const prevValue = includeNumbers;\n            setIncludeNumbers(!prevValue);\n          }}  \n        />\n\n        <p for=\"includeSymbols\">Include symbols</p>\n        <input \n          type = \"checkbox\" \n          id = \"includeSymbols\"\n          value = {includeSymbols}\n          onChange = {() => {\n            const prevValue = includeSymbols;\n            setIncludeSymbols(!prevValue);\n          }}\n        />\n\n        <button \n          className = \"btn\" \n          onClick = {generatePassword}\n        >\n          Generate password\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default PasswordGenerator;"]},"metadata":{},"sourceType":"module"}