{"ast":null,"code":"import { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from 'redux-logger';\nimport authReducer from \"./authReducer\";\nimport * as apiCalls from '../api/apiCalls';\n\nconst configureStore = (addLogged = true) => {\n  let localStorageData = localStorage.getItem('wave-auth');\n  let persistedState = {\n    id: 0,\n    username: '',\n    password: '',\n    isLoggedIn: false\n  };\n\n  if (localStorageData) {\n    try {\n      persistedState = JSON.parse(localStorageData);\n      apiCalls.setAuthorizationHeader(persistedState);\n    } catch (error) {}\n  }\n\n  const middleware = applyMiddleware(thunk);\n  const store = createStore(authReducer, persistedState, middleware);\n  store.subscribe(() => {\n    localStorage.setItem('wave-auth', JSON.stringify(store.getState()));\n    apiCalls.setAuthorizationHeader(store.getState());\n  });\n  return store;\n};\n\nexport default configureStore;","map":{"version":3,"sources":["/home/wave/JS tutorials/PasswordGenerator/password-generator/generator/src/redux/configureStore.js"],"names":["applyMiddleware","createStore","thunk","logger","authReducer","apiCalls","configureStore","addLogged","localStorageData","localStorage","getItem","persistedState","id","username","password","isLoggedIn","JSON","parse","setAuthorizationHeader","error","middleware","store","subscribe","setItem","stringify","getState"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;;AAEA,MAAMC,cAAc,GAAG,CAACC,SAAS,GAAG,IAAb,KAAqB;AAC1C,MAAIC,gBAAgB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAvB;AACA,MAAIC,cAAc,GAAG;AACjBC,IAAAA,EAAE,EAAE,CADa;AAEjBC,IAAAA,QAAQ,EAAE,EAFO;AAGjBC,IAAAA,QAAQ,EAAE,EAHO;AAIjBC,IAAAA,UAAU,EAAE;AAJK,GAArB;;AAMA,MAAIP,gBAAJ,EAAqB;AACjB,QAAG;AACCG,MAAAA,cAAc,GAAGK,IAAI,CAACC,KAAL,CAAWT,gBAAX,CAAjB;AACAH,MAAAA,QAAQ,CAACa,sBAAT,CAAgCP,cAAhC;AACH,KAHD,CAGE,OAAMQ,KAAN,EAAa,CAAE;AACpB;;AAED,QAAMC,UAAU,GAAGpB,eAAe,CAACE,KAAD,CAAlC;AACA,QAAMmB,KAAK,GAAGpB,WAAW,CAACG,WAAD,EAAcO,cAAd,EAA8BS,UAA9B,CAAzB;AAEAC,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AAClBb,IAAAA,YAAY,CAACc,OAAb,CAAqB,WAArB,EAAkCP,IAAI,CAACQ,SAAL,CAAeH,KAAK,CAACI,QAAN,EAAf,CAAlC;AACApB,IAAAA,QAAQ,CAACa,sBAAT,CAAgCG,KAAK,CAACI,QAAN,EAAhC;AACH,GAHD;AAIA,SAAOJ,KAAP;AACD,CAvBD;;AAyBA,eAAef,cAAf","sourcesContent":["import { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from 'redux-logger';\nimport authReducer from \"./authReducer\";\nimport * as apiCalls from '../api/apiCalls';\n\nconst configureStore = (addLogged = true) =>{\n  let localStorageData = localStorage.getItem('wave-auth');\n  let persistedState = {\n      id: 0,\n      username: '',\n      password: '',\n      isLoggedIn: false,\n  }\n  if (localStorageData){\n      try{\n          persistedState = JSON.parse(localStorageData);\n          apiCalls.setAuthorizationHeader(persistedState);\n      } catch(error) {}\n  }\n\n  const middleware = applyMiddleware(thunk);\n  const store = createStore(authReducer, persistedState, middleware);\n\n  store.subscribe(() => {\n      localStorage.setItem('wave-auth', JSON.stringify(store.getState()));\n      apiCalls.setAuthorizationHeader(store.getState());\n  });\n  return store;\n}\n\nexport default configureStore;"]},"metadata":{},"sourceType":"module"}