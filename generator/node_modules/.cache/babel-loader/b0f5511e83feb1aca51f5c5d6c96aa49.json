{"ast":null,"code":"var _jsxFileName = \"/home/wave/JS tutorials/PasswordGenerator/password-generator/generator/src/App.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport { LOWERCASE_CHAR_CODES, UPPERCASE_CHAR_CODES, NUMBER_CHAR_CODES, SYMBOL_CHAR_CODES } from './CharactersCodesArrays';\n\nfunction App() {\n  const [numberOfCharacters, setNumberOfCharacters] = useState(10);\n  const [includeUppercase, setIncludeUppercase] = useState(false);\n  const [includeNumbers, setIncludeNumbers] = useState(false);\n  const [includeSymbols, setIncludeSymbols] = useState(false);\n\n  const onRangeChange = event => {\n    setNumberOfCharacters(event.target.value);\n  };\n\n  const generatePassword = () => {\n    let charCodes = LOWERCASE_CHAR_CODES;\n\n    if (includeUppercase) {\n      charCodes = charCodes.concat(UPPERCASE_CHAR_CODES);\n    }\n\n    if (includeNumbers) {\n      charCodes = charCodes.concat(NUMBER_CHAR_CODES);\n    }\n\n    if (includeSymbols) {\n      charCodes = charCodes.concat(SYMBOL_CHAR_CODES);\n    }\n\n    const passwordCharacters = [];\n\n    for (let i = 0; i <= characterAmount; i++) {\n      const characterCode = charCodes[Math.floor(Math.random() * charCodes.length)];\n      passwordCharacters.push(String.fromCharCode(characterCode));\n    }\n\n    return passwordCharacters.join('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Password generator\"), /*#__PURE__*/React.createElement(\"h3\", {\n    id: \"passwordDisplay\",\n    class: \"password-display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"password\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"Number of characters\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"range\",\n    min: \"1\",\n    max: \"30\",\n    value: numberOfCharacters,\n    onChange: onRangeChange,\n    id: \"characterAmountRange\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    min: \"1\",\n    max: \"50\",\n    value: numberOfCharacters,\n    onChange: onRangeChange,\n    id: \"characterAmountNumber\",\n    class: \"number-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    for: \"includeUppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"Include uppercase\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"includeUppercase\",\n    value: includeUppercase,\n    onChange: () => {\n      const prevValue = includeUppercase;\n      setIncludeUppercase(!prevValue);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    for: \"includeNumbers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, \"Include numbers\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"includeNumbers\",\n    value: includeNumbers,\n    onChange: () => {\n      const prevValue = includeNumbers;\n      setIncludeNumbers(!prevValue);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    for: \"includeSymbols\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, \"Include symbols\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"includeSymbols\",\n    value: includeSymbols,\n    onChange: () => {\n      const prevValue = includeSymbols;\n      setIncludeSymbols(!prevValue);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    class: \"btn\",\n    onClick: generatePassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, \"Generate password\"))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/wave/JS tutorials/PasswordGenerator/password-generator/generator/src/App.js"],"names":["React","useState","ReactDOM","LOWERCASE_CHAR_CODES","UPPERCASE_CHAR_CODES","NUMBER_CHAR_CODES","SYMBOL_CHAR_CODES","App","numberOfCharacters","setNumberOfCharacters","includeUppercase","setIncludeUppercase","includeNumbers","setIncludeNumbers","includeSymbols","setIncludeSymbols","onRangeChange","event","target","value","generatePassword","charCodes","concat","passwordCharacters","i","characterAmount","characterCode","Math","floor","random","length","push","String","fromCharCode","join","prevValue"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport {LOWERCASE_CHAR_CODES, \n        UPPERCASE_CHAR_CODES,\n        NUMBER_CHAR_CODES,\n        SYMBOL_CHAR_CODES,\n      } \nfrom './CharactersCodesArrays';\n\nfunction App() {\n\n  const [numberOfCharacters, setNumberOfCharacters] = useState(10);\n  const [includeUppercase, setIncludeUppercase] = useState(false);\n  const [includeNumbers, setIncludeNumbers] = useState(false);\n  const [includeSymbols, setIncludeSymbols] = useState(false);\n\n  const onRangeChange = (event) => {\n    setNumberOfCharacters(event.target.value);\n  }\n\n  const generatePassword = () => {\n    let charCodes = LOWERCASE_CHAR_CODES;\n    if (includeUppercase){\n      charCodes = charCodes.concat(UPPERCASE_CHAR_CODES);\n    }  \n    if (includeNumbers){\n      charCodes = charCodes.concat(NUMBER_CHAR_CODES);\n    }\n    if(includeSymbols){\n      charCodes = charCodes.concat(SYMBOL_CHAR_CODES);\n    }\n    const passwordCharacters = [];\n    for(let i = 0; i <= characterAmount; i++){\n      const characterCode = charCodes[Math.floor(Math.random() * charCodes.length)];\n      passwordCharacters.push(String.fromCharCode(characterCode));\n    }\n    \n    return passwordCharacters.join('');\n  }\n  return (\n    <div className=\"App\">\n      <div className = \"container\">\n        <h1 className = \"title\">Password generator</h1>\n        <h3 id = \"passwordDisplay\" class = \"password-display\">password</h3>\n        <div className = \"form\">\n          <p>Number of characters</p>\n          <div>\n            <input \n              type = \"range\" \n              min=\"1\" \n              max=\"30\" \n              value={numberOfCharacters}\n              onChange = {onRangeChange}\n              id=\"characterAmountRange\"\n            />\n            <input \n              type = \"number\"\n              min=\"1\" \n              max=\"50\" \n              value={numberOfCharacters}\n              onChange = {onRangeChange}\n              id=\"characterAmountNumber\"  \n              class = \"number-input\"\n            />\n          </div>\n          <p for=\"includeUppercase\">Include uppercase</p>\n          <input \n            type = \"checkbox\" \n            id = \"includeUppercase\"\n            value = {includeUppercase}\n            onChange = {() => {\n              const prevValue = includeUppercase;\n              setIncludeUppercase(!prevValue);\n            }}  \n          />\n\n          <p for=\"includeNumbers\">Include numbers</p>\n          <input \n            type = \"checkbox\" \n            id = \"includeNumbers\"\n            value = {includeNumbers}\n            onChange = {() => {\n              const prevValue = includeNumbers;\n              setIncludeNumbers(!prevValue);\n            }}  \n          />\n\n          <p for=\"includeSymbols\">Include symbols</p>\n          <input \n            type = \"checkbox\" \n            id = \"includeSymbols\"\n            value = {includeSymbols}\n            onChange = {() => {\n              const prevValue = includeSymbols;\n              setIncludeSymbols(!prevValue);\n            }}\n          />\n\n          <button \n            class = \"btn\" \n            onClick = {generatePassword}\n          >\n            Generate password\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}